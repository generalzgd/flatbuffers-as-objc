/**
 * 
 * Powered by Zhangguodong 
 * 
 */

// automatically generated by the FlatBuffers compiler, do not modify

package Jason.Flat.Test
{

	import zgd.google.flatbuffers.*;
	import flash.utils.ByteArray;


	/**
	 * 文理数据结构
	 */
	public class TextureData extends Table
	{
		/**
		 * @param ByteArray inData
		 * @return TextureData
		 */
		public static function getRootAsTextureData(inData:ByteArray):TextureData
		{
			var bb:ByteBuffer = ByteBuffer.wrap(inData);
			var obj:TextureData = new TextureData();
			obj.init(bb.getInt(bb.getPosition()) + bb.getPosition(), bb);
			return obj;
		}

		/**
		 * @param int i offset
		 * @param ByteBuffer bb
		 * @return TextureData
		 */
		public function init(i:int, bb:ByteBuffer):TextureData
		{
			this.bb_pos = i;
			this.bb = bb;
			return this;
		}

		/**
		 * @return int
		 */
		public function getImageSize():int
		{
			var o:int = this.__offset(4);
			return o!=0?this.bb.getInt(o+this.bb_pos):0;
		}

		/**
		 * @param int offset
		 * @return int
		 */
		public function getImageData(j:int):int
		{
			var o:int = this.__offset(6);
			return o!=0?this.bb.getUbyte(this.__vector(o) + j * 1):0;
		}

		/**
		 * @return int
		 */
		public function getImageDataLength():int
		{
			var o:int = this.__offset(6);
			return o!=0?this.__vector_len(o):0;
		}

		/**
		 * @return ByteArray
		 */
		public function getImageDataBytes():ByteArray
		{
			return this.__vector_as_bytes(6);
		}

		/**
		 * @return Array
		 */
		public function getImageDataVector():Array
		{
			var arr:Array = new Array();
			var len:int = this.getImageDataLength();
			for(var i:int=0; i<len; ++i)
			{
				arr.push( this.getImageData(i) );
			}
			return arr;
		}

		/**
		 * @return int
		 */
		public function getTestNum2():int
		{
			var o:int = this.__offset(8);
			return o!=0?this.bb.getInt(o+this.bb_pos):0;
		}

		/**
		 * @return int
		 */
		public function getImageTest():int
		{
			var o:int = this.__offset(10);
			return o!=0?this.bb.getShort(o+this.bb_pos):0;
		}

		/**
		 * change to json object
		 */
		public function toJson():Object
		{
			var o:Object = {};
			var arr:Array;
			var len:int;
			var i:int;
			o.image_size = getImageSize();
			arr = [];
			len = getImageDataLength();
			for(i=0; i<len; ++i)
			{
				var e:* = getImageData(i);
				arr.push( e );
			}
			o.image_data = arr;
			o.test_num2 = getTestNum2();
			o.image_test = getImageTest();
			return o;
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @return void
		 */
		public static function startTextureData(builder:FlatBufferBuilder):void
		{
			builder.startObject(4);
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @param (if type is * means int offset value)
		 * @return TextureData offset
		 */
		public static function createTextureData(builder:FlatBufferBuilder, 
										imageSize:int, 
										imageDataOffset:*, 
										testNum2:int, 
										imageTest:int):int
		{
			builder.startObject(4);
			addImageSize(builder, imageSize);
			addImageData(builder, imageDataOffset);
			addTestNum2(builder, testNum2);
			addImageTest(builder, imageTest);
			var o:int = builder.endObject();
			return o;
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @param (if type is * means int offset value) int
		 * @return void
		 */
		public static function addImageSize(builder:FlatBufferBuilder, imageSize:int):void
		{
			builder.addIntX(0, imageSize, 0);
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @param (if type is * means int offset value) *
		 * @return void
		 */
		public static function addImageData(builder:FlatBufferBuilder, imageDataOffset:*):void
		{
			builder.addOffsetX(1, imageDataOffset, 0);
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @param array ofsset array
		 * @return int vector offset
		 */
		public static function createImageDataVector(builder:FlatBufferBuilder, data:Array):int
		{
			builder.startVector(1, data.length, 1);
			for(var i:int=data.length-1; i>=0; i--){
				builder.addUbyte(data[i]);
			}
			return builder.endVector();
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @param int numElems
		 * @return void
		 */
		public static function startImageDataVector(builder:FlatBufferBuilder, numElems:int):void
		{
			builder.startVector(1, numElems, 1);
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @param (if type is * means int offset value) int
		 * @return void
		 */
		public static function addTestNum2(builder:FlatBufferBuilder, testNum2:int):void
		{
			builder.addIntX(2, testNum2, 0);
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @param (if type is * means int offset value) int
		 * @return void
		 */
		public static function addImageTest(builder:FlatBufferBuilder, imageTest:int):void
		{
			builder.addShortX(3, imageTest, 0);
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @return int table offset
		 */
		public static function endTextureData(builder:FlatBufferBuilder):int
		{
			var o:int = builder.endObject();
			return o;
		}

	}


}